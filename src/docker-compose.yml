name: wave
services:
  postgres:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: wave
      POSTGRES_PASSWORD: ***REMOVED***
      POSTGRES_DB: wave
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pgdata_final:/var/lib/postgresql/data
    profiles: ["deploy"]

  redis:
    image: redis:latest
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    profiles: ["deploy"]

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    volumes:
      - npm-data:/data
      - npm-letsencrypt:/etc/letsencrypt
    profiles: ["deploy"]

  orchestrator:
    build:
      context: ./orchestrator
    image: wave-orchestrator
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${DASHBOARD_PORT:-5050}:5050"
      - "${QUEUE_PORT:-5025}:5025"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./orcestrater_data:/data
      - ./.env:/default_env:ro
    environment:
      - APPLICATION_ROOT=/admin
      - WERKZEUG_PROXY_FIX=1
    profiles: ["build", "deploy"]

  frontend:
    build:
      context: ./frontend
    image: wave-frontend
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${FRONTEND_PORT:-5000}:5000"
    profiles: ["build", "deploy"]

  data-collector:
    build:
      context: ./data-collector
    image: data-collector
    env_file:
      - .env
    profiles: ["build"]

  history-collector:
    build:
      context: ./history-collector
    image: history-collector
    env_file:
      - .env
    profiles: ["build"]

volumes:
  pgdata_final:
  npm-data:
  npm-letsencrypt:
